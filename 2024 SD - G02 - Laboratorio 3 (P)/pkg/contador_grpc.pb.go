// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/contador.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Contador_Obtener_FullMethodName     = "/contador.Contador/Obtener"
	Contador_Incrementar_FullMethodName = "/contador.Contador/Incrementar"
)

// ContadorClient is the client API for Contador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContadorClient interface {
	Obtener(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Valor, error)
	// El usuario incrementa el contador en uno y retorna el nuevo valor del contador.
	// TODO: la rpc se debe llamar Incrementar, recibir un mensaje Vacio y
	// retornar un mensaje Valor.
	Incrementar(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Valor, error)
}

type contadorClient struct {
	cc grpc.ClientConnInterface
}

func NewContadorClient(cc grpc.ClientConnInterface) ContadorClient {
	return &contadorClient{cc}
}

func (c *contadorClient) Obtener(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Valor, error) {
	out := new(Valor)
	err := c.cc.Invoke(ctx, Contador_Obtener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contadorClient) Incrementar(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Valor, error) {
	out := new(Valor)
	err := c.cc.Invoke(ctx, Contador_Incrementar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContadorServer is the server API for Contador service.
// All implementations must embed UnimplementedContadorServer
// for forward compatibility
type ContadorServer interface {
	Obtener(context.Context, *Vacio) (*Valor, error)
	// El usuario incrementa el contador en uno y retorna el nuevo valor del contador.
	// TODO: la rpc se debe llamar Incrementar, recibir un mensaje Vacio y
	// retornar un mensaje Valor.
	Incrementar(context.Context, *Vacio) (*Valor, error)
	mustEmbedUnimplementedContadorServer()
}

// UnimplementedContadorServer must be embedded to have forward compatible implementations.
type UnimplementedContadorServer struct {
}

func (UnimplementedContadorServer) Obtener(context.Context, *Vacio) (*Valor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Obtener not implemented")
}
func (UnimplementedContadorServer) Incrementar(context.Context, *Vacio) (*Valor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incrementar not implemented")
}
func (UnimplementedContadorServer) mustEmbedUnimplementedContadorServer() {}

// UnsafeContadorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContadorServer will
// result in compilation errors.
type UnsafeContadorServer interface {
	mustEmbedUnimplementedContadorServer()
}

func RegisterContadorServer(s grpc.ServiceRegistrar, srv ContadorServer) {
	s.RegisterService(&Contador_ServiceDesc, srv)
}

func _Contador_Obtener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContadorServer).Obtener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contador_Obtener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContadorServer).Obtener(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contador_Incrementar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContadorServer).Incrementar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Contador_Incrementar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContadorServer).Incrementar(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

// Contador_ServiceDesc is the grpc.ServiceDesc for Contador service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Contador_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contador.Contador",
	HandlerType: (*ContadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Obtener",
			Handler:    _Contador_Obtener_Handler,
		},
		{
			MethodName: "Incrementar",
			Handler:    _Contador_Incrementar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/contador.proto",
}
